---
// TypeScript support enabled
---
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Video Wallpaper Generator</title>
	</head>
	<body style="font-family: system-ui, sans-serif; background: #18181b; color: #fff; margin: 0;">
		<main style="max-width: 800px; margin: 3rem auto; padding: 2rem; background: #23232a; border-radius: 1rem; box-shadow: 0 2px 16px #0002;">
			<h1 style="font-size: 2.5rem; margin-bottom: 0.5em;">Video Wallpaper Generator</h1>
			<p style="font-size: 1.2rem; margin-bottom: 2em;">
				Transform your podcast or radio show audio into YouTube-ready video with evolving, ambient visuals and automated branding overlays.
			</p>
			
			<div id="workflow" style="margin-bottom: 2em;">
				<h3>Workflow:</h3>
				<ol>
					<li>Upload your audio file (WAV/MP3, â‰¤ 250 MB)</li>
					<li>Enter episode details (optional)</li>
					<li>Select a visual style preset</li>
					<li>Preview a 15-second sample</li>
					<li>Approve or regenerate</li>
					<li>Render and download your full video</li>
				</ol>
			</div>

			<form id="uploadForm" style="display: flex; flex-direction: column; gap: 1.5em;">
				<div>
					<label for="audioFile">
						<strong>Audio File</strong>
					</label>
					<input 
						type="file" 
						id="audioFile" 
						name="audio" 
						accept="audio/wav,audio/mp3" 
						style="margin-top: 0.5em; width: 100%;" 
						required
					/>
					<div id="fileInfo" style="margin-top: 0.5em; font-size: 0.9em; color: #aaa;"></div>
				</div>

				<div>
					<label for="title">
						<strong>Episode Title</strong>
					</label>
					<input 
						type="text" 
						id="title" 
						name="title" 
						placeholder="Enter episode title" 
						style="margin-top: 0.5em; width: 100%; padding: 0.5em;" 
					/>
				</div>

				<div>
					<label for="guest">
						<strong>Guest (Optional)</strong>
					</label>
					<input 
						type="text" 
						id="guest" 
						name="guest" 
						placeholder="Guest name" 
						style="margin-top: 0.5em; width: 100%; padding: 0.5em;" 
					/>
				</div>

				<div>
					<label for="sponsor">
						<strong>Sponsor (Optional)</strong>
					</label>
					<input 
						type="text" 
						id="sponsor" 
						name="sponsor" 
						placeholder="Sponsor name" 
						style="margin-top: 0.5em; width: 100%; padding: 0.5em;" 
					/>
				</div>

				<div>
					<label for="stylePreset">
						<strong>Style Preset</strong>
					</label>
					<select 
						id="stylePreset" 
						name="stylePreset" 
						style="margin-top: 0.5em; width: 100%; padding: 0.5em;"
					>
						<option value="French New Wave">French New Wave</option>
						<option value="'80s Retro Chromatic">'80s Retro Chromatic</option>
						<option value="Wine-Country Dreamscape">Wine-Country Dreamscape</option>
					</select>
				</div>

				<button 
					type="submit" 
					id="submitBtn"
					style="padding: 0.75em 2em; font-size: 1.1em; background: #6366f1; color: #fff; border: none; border-radius: 0.5em; cursor: pointer;"
				>
					Generate Video
				</button>
			</form>

			<div id="status" style="margin-top: 2em; display: none;">
				<h3>Processing Status:</h3>
				<div id="statusText" style="color: #10b981; font-weight: 500; margin-bottom: 0.5em;"></div>
				<div id="stageIndicator" style="color: #6366f1; font-size: 0.9em; margin-bottom: 1em;"></div>
				<div id="progress" style="margin-top: 1em;">
					<div style="background: #1f1f23; height: 20px; border-radius: 10px; overflow: hidden; position: relative;">
						<div id="progressBar" style="width: 0%; height: 100%; background: linear-gradient(90deg, #6366f1, #8b5cf6); border-radius: 10px; transition: width 0.5s ease; position: relative;">
							<div style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%); color: white; font-size: 0.8em; font-weight: 500; text-shadow: 0 1px 2px rgba(0,0,0,0.5);"></div>
						</div>
					</div>
				</div>
				<div id="frameCountIndicator" style="margin-top: 0.5em; color: #aaa; font-size: 0.9em;"></div>
			</div>

			<div id="results" style="margin-top: 2em; display: none;">
				<h3>Results:</h3>
				<div id="videoInfo" style="background: #1f1f23; padding: 1em; border-radius: 0.5em; margin-bottom: 1em;"></div>
				<div style="display: flex; gap: 1em;">
					<button id="downloadBtn" style="padding: 0.5em 1em; background: #10b981; color: #fff; border: none; border-radius: 0.5em; cursor: pointer;">
						Download Video
					</button>
					<button id="youtubeBtn" style="padding: 0.5em 1em; background: #ef4444; color: #fff; border: none; border-radius: 0.5em; cursor: pointer;">
						Upload to YouTube
					</button>
				</div>
			</div>

			<div style="margin-top: 2em; color: #aaa; font-size: 0.95em;">
				<p><em>Note: This is an MVP prototype. Video rendering and AI visuals are simulated for demonstration.</em></p>
			</div>
		</main>

		<script>
			console.log('SCRIPT LOADED');
			const form = document.getElementById('uploadForm') as HTMLFormElement;
			const fileInput = document.getElementById('audioFile') as HTMLInputElement;
			const fileInfo = document.getElementById('fileInfo') as HTMLDivElement;
			const status = document.getElementById('status') as HTMLDivElement;
			const statusText = document.getElementById('statusText') as HTMLDivElement;
			const stageIndicator = document.getElementById('stageIndicator') as HTMLDivElement;
			const progressBar = document.getElementById('progressBar') as HTMLDivElement;
			const results = document.getElementById('results') as HTMLDivElement;
			const videoInfo = document.getElementById('videoInfo') as HTMLDivElement;
			const downloadBtn = document.getElementById('downloadBtn') as HTMLButtonElement;
			const youtubeBtn = document.getElementById('youtubeBtn') as HTMLButtonElement;
			const frameCountIndicator = document.getElementById('frameCountIndicator') as HTMLDivElement;

			let currentVideoPath: string = '';
			let currentVideoUrl: string = '';
			let currentJobId: string = '';

			// File validation
			fileInput.addEventListener('change', (e) => {
				const file = (e.target as HTMLInputElement).files?.[0];
				if (file) {
					const sizeMB = (file.size / (1024 * 1024)).toFixed(2);
					fileInfo.textContent = `File: ${file.name} (${sizeMB} MB)`;
					
					if (file.size > 250 * 1024 * 1024) {
						fileInfo.style.color = '#ef4444';
						fileInfo.textContent += ' - File too large (max 250MB)';
					} else {
						fileInfo.style.color = '#10b981';
					}
				}
			});

			// Form submission
			form.addEventListener('submit', async (e) => {
				console.log('Form submitted!');
				e.preventDefault();
				
				const formData = new FormData(form);
				const file = fileInput.files?.[0];
				
				if (!file) {
					console.log('No file selected');
					alert('Please select an audio file');
					return;
				}

				if (file.size > 250 * 1024 * 1024) {
					console.log('File too large');
					alert('File size exceeds 250MB limit');
					return;
				}

				status.style.display = 'block';
				results.style.display = 'none';
				progressBar.style.width = '0%';
				statusText.textContent = 'Uploading audio file...';
				statusText.style.color = '#10b981';
				frameCountIndicator.textContent = '';
				
				try {
					console.log('Uploading to backend...');
					const response = await fetch('/api/upload', {
						method: 'POST',
						body: formData
					});
					console.log('Upload response received');
					
					if (!response.ok) {
						console.log('Upload failed:', response.status, response.statusText);
						throw new Error(`Upload failed: ${response.status} ${response.statusText}`);
					}
					
					const result = await response.json();
					console.log('Upload result:', result);

					if (!result.success) {
						console.log('Upload not successful:', result.error);
						throw new Error(result.error || 'Upload failed');
					}

					currentJobId = result.jobId;
					currentVideoPath = '';
					currentVideoUrl = '';

					statusText.textContent = 'Audio uploaded successfully! Starting video generation...';
					frameCountIndicator.textContent = 'Job ID: ' + currentJobId;

					console.log('About to call pollFrameProgress', currentJobId);

					await pollFrameProgress(currentJobId);

					// Poll for job result
					const jobResult = await pollJobResult(currentJobId);
					if (jobResult.success) {
						currentVideoPath = jobResult.videoPath;
						currentVideoUrl = `/api/download?file=${encodeURIComponent(jobResult.videoPath.split('/').pop() || 'video.mp4')}`;
						showResults(jobResult);
					} else {
						statusText.textContent = `Error: ${jobResult.error || 'Video generation failed'}`;
						statusText.style.color = '#ef4444';
						frameCountIndicator.textContent = 'Please try again or contact support';
					}
				} catch (error) {
					console.log('Error in form submit handler:', error);
					statusText.textContent = `Error: ${error instanceof Error ? error.message : String(error)}`;
					statusText.style.color = '#ef4444';
					frameCountIndicator.textContent = 'Please check your file and try again';
				}
			});

			function showResults(result: any) {
				const title = (document.getElementById('title') as HTMLInputElement).value || 'Untitled Episode';
				const duration = Math.floor(result.duration || (Math.random() * 60) + 30); // fallback for demo
				
				videoInfo.innerHTML = `
					<h4>${title}</h4>
					<p>Duration: ${Math.floor(duration / 60)}:${(duration % 60).toString().padStart(2, '0')}</p>
					<p>Resolution: 1920x1080 (1080p)</p>
					<p>Format: MP4</p>
				`;
				
				results.style.display = 'block';
			}

			// Download button
			downloadBtn.addEventListener('click', () => {
				if (currentVideoPath) {
					const fileName = currentVideoPath.split('/').pop() || 'video.mp4';
					const a = document.createElement('a');
					a.href = `/api/download?file=${encodeURIComponent(fileName)}`;
					a.download = fileName;
					document.body.appendChild(a);
					a.click();
					document.body.removeChild(a);
				} else {
					alert('No video available for download.');
				}
			});

			// YouTube upload button
			youtubeBtn.addEventListener('click', async () => {
				try {
					const response = await fetch('/api/youtube-upload', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({
							videoPath: currentVideoPath,
							title: (document.getElementById('title') as HTMLInputElement).value || 'Untitled Video',
							description: 'Generated with Video Wallpaper Generator',
							tags: ['podcast', 'audio', 'video wallpaper'],
							privacyStatus: 'private'
						})
					});

					const result = await response.json();
					
					if (result.success) {
						alert(`Video uploaded to YouTube! ID: ${result.videoId}`);
					} else if (result.authUrl) {
						alert('YouTube authentication required. Please set up your credentials.');
					} else {
						alert(`Upload failed: ${result.error}`);
					}
				} catch (error) {
					alert(`Upload error: ${error}`);
				}
			});

			async function pollFrameProgress(jobId: string) {
				console.log('Calling pollFrameProgress', jobId);
				statusText.textContent = 'Starting video generation...';
				stageIndicator.textContent = 'Stage 1: Audio Analysis & Frame Generation';
				progressBar.style.width = '0%';
				const progressText = progressBar.querySelector('div');
				if (progressText) progressText.textContent = '0%';
				frameCountIndicator.textContent = '';
				
				let attempts = 0;
				const maxAttempts = 300; // 5 minutes max
				
				while (attempts < maxAttempts) {
					await new Promise(resolve => setTimeout(resolve, 1000));
					attempts++;
					
					try {
						console.log('Polling /api/progress for jobId:', jobId);
						const res = await fetch(`/api/progress?jobId=${encodeURIComponent(jobId)}`);
						console.log('Progress API response:', res);
						
						if (res.ok) {
							const progress = await res.json();
							console.log('[PROGRESS POLL]', progress);
							
							if (progress.currentFrame !== undefined && progress.totalFrames !== undefined) {
								const percentage = (progress.currentFrame / progress.totalFrames) * 100;
								progressBar.style.width = `${percentage}%`;
								if (progressText) progressText.textContent = `${Math.round(percentage)}%`;
								console.log('[PROGRESS BAR UPDATE]', percentage, progressBar.style.width);
								progressBar.style.display = 'block'; // Ensure visible
								progressBar.offsetWidth; // Force reflow
								
								// Update status based on progress
								if (progress.currentFrame === 0) {
									statusText.textContent = 'Analyzing audio and preparing frames...';
									stageIndicator.textContent = 'Stage 1: Audio Analysis & Frame Generation';
								} else if (progress.currentFrame < progress.totalFrames) {
									statusText.textContent = `Generating video frames... (${Math.round(percentage)}%)`;
									stageIndicator.textContent = 'Stage 1: Audio Analysis & Frame Generation';
									frameCountIndicator.textContent = `Frames: ${progress.currentFrame} / ${progress.totalFrames}`;
								} else {
									statusText.textContent = 'Frames complete! Adding overlays...';
									stageIndicator.textContent = 'Stage 2: Adding Overlays & Finalizing';
									progressBar.style.width = '100%';
									if (progressText) progressText.textContent = '100%';
									frameCountIndicator.textContent = `All ${progress.totalFrames} frames generated`;
									break;
								}
							} else {
								statusText.textContent = 'Processing started...';
								stageIndicator.textContent = 'Stage 1: Audio Analysis & Frame Generation';
								frameCountIndicator.textContent = 'Waiting for frame generation to begin...';
							}
						} else {
							console.log('Progress API not ok:', res.status, res.statusText);
							frameCountIndicator.textContent = 'Waiting for progress...';
						}
					} catch (error) {
						console.log('Error in pollFrameProgress:', error);
						frameCountIndicator.textContent = 'Error polling progress';
						break;
					}
				}
				
				if (attempts >= maxAttempts) {
					throw new Error('Processing timeout - job took too long');
				}
			}

			async function pollJobResult(jobId: string) {
				statusText.textContent = 'Finalizing video...';
				stageIndicator.textContent = 'Stage 2: Adding Overlays & Finalizing';
				frameCountIndicator.textContent = 'Adding overlays and generating thumbnail...';
				
				let attempts = 0;
				const maxAttempts = 60; // 1 minute max
				
				while (attempts < maxAttempts) {
					await new Promise(resolve => setTimeout(resolve, 2000));
					attempts++;
					
					try {
						const res = await fetch(`/api/job-result?jobId=${encodeURIComponent(jobId)}`);
						
						if (res.status === 200) {
							const result = await res.json();
							statusText.textContent = 'Video generation complete!';
							stageIndicator.textContent = 'Complete!';
							statusText.style.color = '#10b981';
							return result;
						} else if (res.status === 404) {
							statusText.textContent = 'Processing video...';
							stageIndicator.textContent = 'Stage 2: Adding Overlays & Finalizing';
							frameCountIndicator.textContent = `Finalizing... (attempt ${attempts}/${maxAttempts})`;
						} else {
							throw new Error(`Job result check failed: ${res.status}`);
						}
					} catch (error) {
						console.error('Job result polling error:', error);
						statusText.textContent = 'Processing in progress...';
						stageIndicator.textContent = 'Stage 2: Adding Overlays & Finalizing';
						frameCountIndicator.textContent = 'Checking completion...';
					}
				}
				
				throw new Error('Job completion timeout');
			}
		</script>
	</body>
</html>
